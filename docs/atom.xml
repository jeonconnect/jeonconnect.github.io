<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>jeonconnect</title>
	<subtitle>blog</subtitle>
	<link href="https://jeonconnect.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jeonconnect.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-07-26T00:00:00+00:00</updated>
	<id>https://jeonconnect.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>autohotkey</title>
		<published>2022-07-26T00:00:00+00:00</published>
		<updated>2022-07-26T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/autohotkey/" type="text/html"/>
		<id>https://jeonconnect.github.io/autohotkey/</id>
		<content type="html">&lt;h1 id=&quot;jaddonssihaeng-ddeunrog&quot;&gt;자동실행 등록&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl+R&lt;&#x2F;kbd&gt; 로 &lt;code&gt;shell:startup&lt;&#x2F;code&gt; 실행해서 열리는 폴더에 자동실행할 실행파일의 바로가기를 만들어 놓는다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tricks-office.com&#x2F;autohotkey&#x2F;&quot;&gt;오토핫키 (AutoHotkey) 사용하기 - 업무의 잔머리 (tricks-office.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>gradle</title>
		<published>2022-07-22T00:00:00+00:00</published>
		<updated>2022-07-22T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/gradle/" type="text/html"/>
		<id>https://jeonconnect.github.io/gradle/</id>
		<content type="html">&lt;h1 id=&quot;java-keompail-inkowedd-jijjeon&quot;&gt;java 컴파일 인코딩 지정&lt;&#x2F;h1&gt;
&lt;p&gt;아래와 같은 형식으로 인코딩을 명시한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;tasks {
    javadoc {
        options.encoding = &amp;quot;UTF-8&amp;quot;
    }
    compileJava {
        options.encoding = &amp;quot;UTF-8&amp;quot;
    }
    compileTestJava {
        options.encoding = &amp;quot;UTF-8&amp;quot;
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>powershell</title>
		<published>2022-07-12T00:00:00+00:00</published>
		<updated>2022-07-12T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/powershell/" type="text/html"/>
		<id>https://jeonconnect.github.io/powershell/</id>
		<content type="html">&lt;h1 id=&quot;sseoci&quot;&gt;설치&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;macosesse-sseocihagi&quot;&gt;MacOS에서 설치하기&lt;&#x2F;h2&gt;
&lt;p&gt;설치&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;brew install --cask powershell
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;업그레이드&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;brew update
brew upgrade powershell --cask
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;ko-kr&#x2F;powershell&#x2F;scripting&#x2F;install&#x2F;installing-powershell-on-macos?view=powershell-7.2&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;zigford.org&#x2F;setting-powershell-as-default-on-macos.htmls
&lt;ul&gt;
&lt;li&gt;기본 쉘로 설정&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ubuntu-20-04esse-sseocihagi&quot;&gt;Ubuntu 20.04에서 설치하기&lt;&#x2F;h2&gt;
&lt;pre&gt;&lt;code&gt;# Update the list of packages
sudo apt-get update
# Install pre-requisite packages.
sudo apt-get install -y wget apt-transport-https software-properties-common
# Download the Microsoft repository GPG keys
wget -q https:&amp;#x2F;&amp;#x2F;packages.microsoft.com&amp;#x2F;config&amp;#x2F;ubuntu&amp;#x2F;20.04&amp;#x2F;packages-microsoft-prod.deb
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
# Update the list of packages after we added packages.microsoft.com
sudo apt-get update
# Install PowerShell
sudo apt-get install -y powershell
# Start PowerShell
pwsh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo-1&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;ko-kr&#x2F;powershell&#x2F;scripting&#x2F;install&#x2F;install-ubuntu?view=powershell-7.2&quot;&gt;Ubuntu에 PowerShell 설치 - PowerShell | Microsoft Docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;gibbomunbbeosathan&quot;&gt;기본문법사항&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;jaddonbbyeosu&quot;&gt;자동변수&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;ko-kr&#x2F;powershell&#x2F;module&#x2F;microsoft.powershell.core&#x2F;about&#x2F;about_automatic_variables?view=powershell-7.2&amp;amp;viewFallbackFrom=powershell-7.4&quot;&gt;자동 변수 정보 - PowerShell | Microsoft Docs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bbahyeo&quot;&gt;배열&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ssaensseon&quot;&gt;생성&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;$a = 1, 2, 3
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bbi-bbahyeo-ssaensseon&quot;&gt;빈 배열 생성&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;powershell&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;$a = @()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;haesiteibbeu&quot;&gt;해시테이블&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ssaensseon-1&quot;&gt;생성&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;$a = @{a=1;b=2}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bbi-haesiteibbeu-ssaensseon&quot;&gt;빈 해시테이블 생성&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;powershell&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;$a = @{}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;munjahyeo&quot;&gt;문자열&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;issekeipeu&quot;&gt;이스케이프&lt;&#x2F;h3&gt;
&lt;p&gt;이스케이프를 위해 &lt;kbd&gt;`&lt;&#x2F;kbd&gt; 를 사용한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$foo = @&amp;quot;
a
b
c
&amp;quot;@.Replace(&amp;quot;`r`n&amp;quot;,&amp;quot;&amp;quot;).Replace(&amp;#x27;a&amp;#x27;,&amp;#x27;&amp;#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;keulrojje&quot;&gt;클로저&lt;&#x2F;h2&gt;
&lt;p&gt;스크립트 블럭에서 바깥 스코프의 변수를 참조할 수 있다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;$a = 1, 2, 3
$b = { return &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, $a[0] }
&amp;amp; $b #스크립트 블럭 실행
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;moddyu&quot;&gt;모듈&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;psfzf&quot;&gt;PSFzf&lt;&#x2F;h2&gt;
&lt;p&gt;fzf 기능 통합&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kelleyma49&#x2F;PSFzf&quot;&gt;kelleyma49&#x2F;PSFzf: A PowerShell wrapper around the fuzzy finder fzf (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;pailsissetot&quot;&gt;파일시스템&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;ringkeu&quot;&gt;링크&lt;&#x2F;h2&gt;
&lt;p&gt;심볼릭 링크&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;New-Item -ItemType SymbolicLink -Path &amp;quot;Link&amp;quot; -Target &amp;quot;Target&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;하드링크&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;New-Item -ItemType HardLink -Path &amp;quot;Link&amp;quot; -Target &amp;quot;Target&amp;quot; 
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo-2&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;winaero.com&#x2F;create-symbolic-link-windows-10-powershell&#x2F;&quot;&gt;Create Symbolic Link in Windows 10 with PowerShell (winaero.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ssaje&quot;&gt;삭제&lt;&#x2F;h2&gt;
&lt;p&gt;삭제시 &lt;code&gt;-Force&lt;&#x2F;code&gt; 스위치를 붙이지 않으면 권한 문제가 발생하는 경우가 많다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Remove-Item &amp;quot;c:\some\path&amp;quot; -Recurse -Force
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo-3&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;25806947&quot;&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;25806947&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;hweoggyeo&quot;&gt;원격&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;ssh&quot;&gt;ssh&lt;&#x2F;h2&gt;
&lt;p&gt;아래와 같은 방식으로 원격지의 ssh 서버에 대해서 여러 명령을 실행시킬 수 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;ssh -tt username@some.server.com @&amp;quot;
pwd
sudo ls &amp;#x2F;etc
&amp;quot;@.replace(&amp;quot;`r&amp;quot;,&amp;quot;&amp;quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;myeongryeongeo&quot;&gt;명령어&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;were-exe&quot;&gt;were.exe&lt;&#x2F;h2&gt;
&lt;p&gt;실행파일의 위치를 알려준다.
&lt;code&gt;where&lt;&#x2F;code&gt; 는 다른 명령어의 alias 로 등록되어 있기 때문에 &lt;code&gt;where.exe&lt;&#x2F;code&gt; 로 실행해야 한다.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;# 예시
where.exe flutter dart
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>spring boot</title>
		<published>2022-07-08T00:00:00+00:00</published>
		<updated>2022-07-08T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/spring-boot/" type="text/html"/>
		<id>https://jeonconnect.github.io/spring-boot/</id>
		<content type="html">&lt;h1 id=&quot;sseojjeon&quot;&gt;설정&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;spring-boot-jar-bbaposie-application-yml-bbaci&quot;&gt;spring boot jar 배포시에 application.yml 배치&lt;&#x2F;h2&gt;
&lt;p&gt;현재 실행 디렉토리의 config 서브 디렉토리 또는 현재 실행 디렉토리 등에 application.yml 을 배치하면, jar 에 포함된 application.yml 의 설정을 override 한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;www.latera.kr&#x2F;reference&#x2F;java&#x2F;2019-09-29-spring-boot-config-externalize&#x2F;&quot;&gt;Spring Boot] 외부에서 설정 주입하기 - Increment (latera.kr)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theuphill.tistory.com&#x2F;12&quot;&gt;완전히 실행 가능한 Spring Boot 배포 (tistory.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;application-yml-esse-hwanggyeonbbyeosu-sahyon&quot;&gt;application.yml 에서 환경변수 사용&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;${변수명}&lt;&#x2F;code&gt; 형식을 사용해 환경변수가 가진 값으로 대치되도록 지정할 수 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;server:
  address: ${SERVER_IP}
  port: ${SERVER_PORT}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;환경변수가 존재하지 않을 때의 기본사용값을 지정할 수도 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:info}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;사용자의 홈 디렉토리는 &lt;code&gt;${user.home}&lt;&#x2F;code&gt; 으로 참조할 수 있다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;23027315&#x2F;does-application-yml-support-environment-variables&quot;&gt;java - Does application.yml support environment variables? - Stack Overflow&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;61372261&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;deploy&quot;&gt;deploy&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;nginx-hyeoddon&quot;&gt;nginx 연동&lt;&#x2F;h2&gt;
&lt;p&gt;특정 경로를 WAS 로 리다이렉트한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;xxxxxx.com&lt;&#x2F;code&gt;  설정에 추가한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;server {

		...


		location &amp;#x2F;xxx {
                proxy_pass http:&amp;#x2F;&amp;#x2F;localhost:8080&amp;#x2F;xxx;
                proxy_ssl_server_name on;
        }

		...

}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;proxy_ssl_server_name on;&lt;&#x2F;code&gt; 이 없으면 502 에러가 발생할 수 있다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;49116797&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pid-pail-jaddon-ssaensseon&quot;&gt;pid 파일 자동 생성&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;spring.pid.file&lt;&#x2F;code&gt; 설정을 지정하면 해당 경로 파일에 실행된 프로세스의 pid 를 저장한다.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ApplicationPidFileWriter&lt;&#x2F;code&gt; 를 어플리케이션 리스너로 등록해줘야 한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
class SomeApplication

fun main(args: Array&amp;lt;String&amp;gt;) {
    SpringApplication(SomeApplication::class.java)
        .apply {
            addListeners(ApplicationPidFileWriter())
        }
        .run(*args)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;pid 파일 생성 경로를 설정할 수 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  pid:
    file: &amp;#x2F;xxx&amp;#x2F;yyy&amp;#x2F;zzz.pid
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;toshi15shkim.github.io&#x2F;articles&#x2F;2019-09&#x2F;spring-boot-pid&quot;&gt;Boot로 실행시 pid 자동 생성 방법 | Toshi의 개발 블로그 (toshi15shkim.github.io)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jheloper.github.io&#x2F;2019&#x2F;05&#x2F;spring-boot-pid-file&#x2F;&quot;&gt;스프링 부트 PID(Process Identifier) 파일 생성 방법 (jheloper.github.io)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;spring-boot-haeheu-ssebissero-ddeunrog&quot;&gt;spring boot 앱을 서비스로 등록&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.dante2k.com&#x2F;564&quot;&gt;ubuntu server systemd 에 spring boot jar 서비스로 등록하기 (dante2k.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;jpa&quot;&gt;JPA&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;h2-database-reul-deiteosossero-sahyon&quot;&gt;H2 Database 를 데이터소스로 사용&lt;&#x2F;h2&gt;
&lt;p&gt;build.gradle.kts 의존성 설정&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;implementation(&amp;quot;org.springframework.boot:spring-boot-starter-data-jpa&amp;quot;)
implementation(&amp;quot;com.h2database:h2&amp;quot;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;application.yml 설정&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  h2:
    console:
      enabled: false
      path: &amp;quot;&amp;#x2F;h2&amp;quot;
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:xxxx
    username : yyyy
    password : zzzz
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;메모리 DB 로 사용할 경우&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;spring.datasource.url=jdbc:h2:mem:xxxx
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;파일 DB 로 사용할 경우&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;spring.datasource.url=jdbc:h2:file:~&amp;#x2F;xxxx
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.baeldung.com&#x2F;spring-boot-h2-database&quot;&gt;Spring Boot With H2 Database | Baeldung&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;47217202&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kotlin-sseojjeon&quot;&gt;kotlin 설정&lt;&#x2F;h2&gt;
&lt;p&gt;build.gradle.kts 에 JPA 사용을 위한 설정을 추가한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;plugins {

    val kotlinVersion = &amp;quot;1.6.21&amp;quot;

	...중략...
	
    kotlin(&amp;quot;plugin.jpa&amp;quot;) version &amp;quot;${kotlinVersion}&amp;quot;
    kotlin(&amp;quot;plugin.allopen&amp;quot;) version &amp;quot;${kotlinVersion}&amp;quot;
    kotlin(&amp;quot;plugin.noarg&amp;quot;) version &amp;quot;${kotlinVersion}&amp;quot;
}

noArg {
    annotation(&amp;quot;javax.persistence.Entity&amp;quot;)
}

allOpen {
    annotation(&amp;quot;javax.persistence.Entity&amp;quot;)
    annotation(&amp;quot;javax.persistence.MappedSuperclass&amp;quot;)
    annotation(&amp;quot;javax.persistence.Embeddable&amp;quot;)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;minkukjo.github.io&#x2F;study&#x2F;docs&#x2F;spring&#x2F;jpa&#x2F;kotlin-jpa-guide&#x2F;&quot;&gt;Kotlin JPA 개발 가이드 | 도전하는 개발자 (minkukjo.github.io)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;cli&quot;&gt;CLI&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;cli-eopeulrikeissyeoeuro-sseojjeon&quot;&gt;CLI 어플리케이션으로 설정&lt;&#x2F;h2&gt;
&lt;p&gt;어플리케이션이 CommandLineRunner 인터페이스를 구현하도록 한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
class SomeApplication : CommandLineRunner{
    override fun run(vararg args: String?) {
        &amp;#x2F;&amp;#x2F;TODO SOMETHING
    }
}

fun main(args: Array&amp;lt;String&amp;gt;) {
    runApplication&amp;lt;DcWorkerApplication&amp;gt;(*args)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;logging&quot;&gt;Logging&lt;&#x2F;h1&gt;
&lt;p&gt;아래와 같이 logger 객체를 생성하고 사용할 수 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;...
import org.slf4j.LoggerFactory
...

class SomeClass{
	private val logger = LoggerFactory.getLogger(javaClass)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;application.yml 에 로 관련 설정을 한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;logging:
  file:
    name: logs&amp;#x2F;some_application.log
  logback:
    rollingpolicy:
      max-file-size: 5MB
  level:
    root: error
    com.some.app: info

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>rust</title>
		<published>2022-06-06T00:00:00+00:00</published>
		<updated>2022-06-06T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/git/" type="text/html"/>
		<id>https://jeonconnect.github.io/git/</id>
		<content type="html">&lt;h1 id=&quot;bbidde&quot;&gt;빌드&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;dependency-ro-git-jjejjanso-jijjeon&quot;&gt;dependency 로 git 저장소 지정&lt;&#x2F;h2&gt;
&lt;p&gt;~&#x2F;.cargo&#x2F;config 파일에 아래 내용을 추가한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;[net]
git-fetch-with-cli = true
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cargo.toml 에 아래와 같이 의존성 지정한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;xxx_lib = { git = &amp;quot;ssh:&amp;#x2F;&amp;#x2F;git@xxx.com&amp;#x2F;yyy&amp;#x2F;xxx_lib.git&amp;quot; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;아래 명령으로 해당 라이브러리만 다시 갱신할 수 있다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;cargo update -p xxx_lib
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;pull&#x2F;5914&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ubuntu 20.04</title>
		<published>2022-04-20T00:00:00+00:00</published>
		<updated>2022-04-20T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/ubuntu-20-04/" type="text/html"/>
		<id>https://jeonconnect.github.io/ubuntu-20-04/</id>
		<content type="html">&lt;h1 id=&quot;bbanhwabbyeo&quot;&gt;방화벽&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;ssantae-hwagin&quot;&gt;상태 확인&lt;&#x2F;h2&gt;
&lt;p&gt;방화벽 활성화 상태를 조회한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;sudo ufw status
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ssh-ssebbe&quot;&gt;ssh 서버&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;sseoci&quot;&gt;설치&lt;&#x2F;h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install openssh-server
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;방화벽이 활성화되어있다면 ssh 접근을 허용한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;sudo ufw allow ssh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;jeeo&quot;&gt;제어&lt;&#x2F;h2&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl status ssh
sudo systemctl enable ssh
sudo systemctl start ssh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;gibbo-ggabba-tulcein-sseoci&quot;&gt;기본 개발 툴체인 설치&lt;&#x2F;h1&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install build-essential
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>css</title>
		<published>2022-03-18T00:00:00+00:00</published>
		<updated>2022-03-18T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/css/" type="text/html"/>
		<id>https://jeonconnect.github.io/css/</id>
		<content type="html">&lt;h1 id=&quot;jjunpan-jjeonryeol&quot;&gt;중앙 정렬&lt;&#x2F;h1&gt;
&lt;p&gt;바깥 div 의 display 속성을 flex 로 하고, align-items 와 justify-content 를 center 로 지정한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;display:flex;align-items:center;justify-content:center&amp;quot;&amp;gt;
	중앙에 정렬됨
&amp;lt;&amp;#x2F;div&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>vim</title>
		<published>2022-03-18T00:00:00+00:00</published>
		<updated>2022-03-18T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/vim/" type="text/html"/>
		<id>https://jeonconnect.github.io/vim/</id>
		<content type="html">&lt;h1 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;teugjjeon-ddacugki-haejehagi&quot;&gt;특정 단축키 해제하기&lt;&#x2F;h2&gt;
&lt;p&gt;vscode 기능을 덮어쓴 vim 단축키를 비활성화해서 원래의 vscode 기능을 사용하려면&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt; File - Preferences - Keyboard Shorcuts&lt;&#x2F;kbd&gt; 에서 &lt;code&gt;vim&lt;&#x2F;code&gt; 으로 검색해 필터링한 후에 원치않는 vim 키 바인딩을 지워준다.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;coldmater.tistory.com&#x2F;191&quot;&gt;VSCode][Vim] Visual Studio Code 에 Vim 설치하기, Vim Mode Toggle (tistory.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>tauri</title>
		<published>2022-03-12T00:00:00+00:00</published>
		<updated>2022-03-12T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/tauri/" type="text/html"/>
		<id>https://jeonconnect.github.io/tauri/</id>
		<content type="html">&lt;h1 id=&quot;peurojjeteu-ssaensseon-totpeulris&quot;&gt;프로젝트 생성 템플릿&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;n8jadams&#x2F;tauri-typescript-react-boilerplate&quot;&gt;n8jadams&#x2F;tauri-typescript-react-boilerplate: A Tauri Typescript React Boilerplate that works out of the box. (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;oSethoum&#x2F;tauri-react-template&quot;&gt;oSethoum&#x2F;tauri-react-template: Tauri, React, Vite and Typescript template. (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2022</title>
		<published>2022-03-03T00:00:00+00:00</published>
		<updated>2022-03-03T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/2022/" type="text/html"/>
		<id>https://jeonconnect.github.io/2022/</id>
		<content type="html">&lt;h1 id=&quot;202203&quot;&gt;202203&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;20220303&quot;&gt;20220303&lt;&#x2F;h2&gt;
&lt;p&gt;자바 라이브러리를 github 로 관리해야 한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;57371945&#x2F;how-to-access-private-github-package-registry-via-gradle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;202202&quot;&gt;202202&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;20220217&quot;&gt;20220217&lt;&#x2F;h2&gt;
&lt;p&gt;조정의 반복&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>java</title>
		<published>2022-03-03T00:00:00+00:00</published>
		<updated>2022-03-03T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/java/" type="text/html"/>
		<id>https://jeonconnect.github.io/java/</id>
		<content type="html">&lt;h1 id=&quot;openjdk-sseoci&quot;&gt;OpenJDK 설치&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;macos&quot;&gt;MacOS&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;brew 를 통해 설치한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre&gt;&lt;code&gt;brew tap AdoptOpenJDK&amp;#x2F;openjdk
brew install --cask adoptopenjdk8-openj9
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;설치할 버전을 선택할 수 있다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;AdoptOpenJDK&#x2F;homebrew-openjdk#available-versions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Cask adoptopenjdk8 exists in multiple taps&lt;&#x2F;code&gt; 에러가 발생하면 다음과 같이 조치한다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;rm &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;Homebrew&amp;#x2F;Library&amp;#x2F;Taps&amp;#x2F;homebrew&amp;#x2F;homebrew-cask-versions&amp;#x2F;Casks&amp;#x2F;adoptopenjdk8.rb
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;AdoptOpenJDK&#x2F;homebrew-openjdk&#x2F;issues&#x2F;106&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;설치되어있는 JDK 리스트 확인&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;java_home -V
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;shell profile 설정&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;export JAVA_HOME=`&amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;java_home -v 1.8.0_292`
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>windows</title>
		<published>2022-02-23T00:00:00+00:00</published>
		<updated>2022-02-23T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/windows/" type="text/html"/>
		<id>https://jeonconnect.github.io/windows/</id>
		<content type="html">&lt;h1 id=&quot;gassankibodde&quot;&gt;가상키보드&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;kbd&gt;Win + R&lt;&#x2F;kbd&gt; 로 &lt;code&gt;tabtip&lt;&#x2F;code&gt; 실행한다.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.top-password.com&#x2F;blog&#x2F;how-to-open-and-use-windows-10-touch-keyboard&#x2F;&quot;&gt;How to Open and Use Windows 10 Touch Keyboard | Password Recovery (top-password.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>libgdx</title>
		<published>2022-02-05T00:00:00+00:00</published>
		<updated>2022-02-05T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/libgdx/" type="text/html"/>
		<id>https://jeonconnect.github.io/libgdx/</id>
		<content type="html">&lt;h1 id=&quot;robovm&quot;&gt;robovm&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;appstore-ddeunrog-hwekeupeulrou&quot;&gt;appstore 등록 워크플로우&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로젝트의 ios 번들아이디를 동일하게 가지는 앱을 xcode 에서 생성한 후 앱스토어에 최초 한번 등록한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;kbd&gt;Product - Archive&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;buildDevice 가 시뮬레이터로 되어있으면 메뉴가 비활성화되므로 실제 기기로 설정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;kbd&gt;Distribute App&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;제대로 생성한 profile 을 사용한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;developer.apple.com - Certificates, Identifiers &amp;amp; Profiles - Profiles&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;프로파일 추가. Distribution 에서 AppStore 를 선택한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;robovm 으로 생성한 ipa 를 &lt;code&gt;xcrun&lt;&#x2F;code&gt; 을 이용해 업로드한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre&gt;&lt;code&gt;xcrun altool --upload-app --type ios --file &amp;quot;&amp;#x2F;some&amp;#x2F;path&amp;#x2F;app.ipa&amp;quot; --username &amp;quot;apple id&amp;quot; --password &amp;quot;password&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;camgo&quot;&gt;참고&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https:&#x2F;&#x2F;kjun.kr&#x2F;986&quot;&gt;Xamarin] Application Loader 를 이용하지 않고 ipa 파일 업로드하기 :: kjun.kr (kjcoder.tistory.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>git</title>
		<published>2022-01-30T00:00:00+00:00</published>
		<updated>2022-01-30T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/rust/" type="text/html"/>
		<id>https://jeonconnect.github.io/rust/</id>
		<content type="html">&lt;h1 id=&quot;sseojjeon&quot;&gt;설정&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;sseojjeonthanmog-jegge&quot;&gt;설정항목 제거&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;--unset&lt;&#x2F;code&gt; 스위치를 사용한다.
다음 예시를 참고&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;git config --global --unset user.name
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WebAssembly</title>
		<published>2022-01-06T00:00:00+00:00</published>
		<updated>2022-01-06T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/webassembly/" type="text/html"/>
		<id>https://jeonconnect.github.io/webassembly/</id>
		<content type="html">&lt;h1 id=&quot;ssa-peurojjeteu-manddeugi&quot;&gt;새 프로젝트 만들기&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;gibbo-hwekeupeulrou&quot;&gt;기본 워크플로우&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;npm init rust-webpack 을 이용한다. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;rust-webpack-template&quot;&gt;rustwasm&#x2F;rust-webpack-template: Kickstart your Rust, WebAssembly, and Webpack project! (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm init rust-webpack my-app
cd my-app
npm start
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;gita-hwekeupeulrou-camgoman&quot;&gt;기타 워크플로우 (참고만)&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;hwekeupeulrou-1&quot;&gt;워크플로우 #1&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;rust 개발환경이 구성되어 있다고 전제한다.&lt;&#x2F;li&gt;
&lt;li&gt;cargo-generate 기능을 설치한다.&lt;&#x2F;li&gt;
&lt;li&gt;참고 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ashleygwilliams&#x2F;cargo-generate&quot;&gt;GitHub - ashleygwilliams&#x2F;cargo-generate: cargo, make me a project&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cargo install cargo-generate
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cargo generate 를 이용해 프로젝트를 생성한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;참고  &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wasm-pack-template&quot;&gt;GitHub - rustwasm&#x2F;wasm-pack-template: a template for starting a rust-wasm project to be used with wasm-pack&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cargo generate --git https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;rustwasm&amp;#x2F;wasm-pack-template.git --name my-project
cd my-project
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;wasm-pack 으로 build 한다. pkg 폴더 하위에 빌드결과가 생성된다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;wsam-pack build
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;webpack 템플릿을 생성한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;참고 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;rust-webpack-template&quot;&gt;GitHub - rustwasm&#x2F;rust-webpack-template: Kickstart your Rust, WebAssembly, and Webpack project!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm init wasm-app www
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;www&#x2F;package.json 에 wasm-pack 으로 빌드해 생성된 패키지를 의존성 등록한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;json&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&amp;quot;dependencies&amp;quot; : {
    &amp;quot;my-project&amp;quot; : &amp;quot;file:..&amp;#x2F;pkg&amp;quot;    
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;www&#x2F;index.js 를 수정한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;#x2F;&amp;#x2F;import * as wasm from &amp;quot;hello-wasm-pack&amp;quot;
import * as wasm from &amp;quot;my-project&amp;quot;;
wasm.greet();
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;www 폴더에서 다음과 같이 실행하고 8080 포트로 접속해 동작을 확인한다.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;npm run start
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;camgomunsse&quot;&gt;참고문서&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.secmem.org&#x2F;blog&#x2F;2020&#x2F;02&#x2F;19&#x2F;How-to-use-wasm-with-Rust&#x2F;&quot;&gt;How to build WebAssembly app with Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwekeupeulrou-2&quot;&gt;워크플로우 #2&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;wasm-bindgen 프로젝트 예제들대로 한다.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;참고 &lt;a href=&quot;https:&#x2F;&#x2F;rustwasm.github.io&#x2F;docs&#x2F;wasm-bindgen&#x2F;&quot;&gt;Introduction - The &lt;code&gt;wasm-bindgen&lt;&#x2F;code&gt; Guide&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;참고 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustwasm&#x2F;wasm-bindgen&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;wasm-bindgen&#x2F;examples at master · rustwasm&#x2F;wasm-bindgen · GitHub&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwekeupeulrou-3&quot;&gt;워크플로우 #3&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HugoDaniel&#x2F;svelte-template&quot;&gt;Svelte + TypeScript + Parcel + Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;https:&#x2F;&#x2F;hugodaniel.pt&#x2F;posts&#x2F;browser-tech-stack-2020&#x2F;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwekeupeulrou-4&quot;&gt;워크플로우 #4&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;dev.to&#x2F;krzysztofkaczy9&#x2F;webassembly-rust-typescript-project-setup-4gio&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;kaczor6418&#x2F;web-assembly-rust-typescript-template&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;hwekeupeulrou-5&quot;&gt;워크플로우 #5&lt;&#x2F;h3&gt;
&lt;p&gt;create snowpack app 의 snowpack-template-ts-rust-wasm 템플릿을 사용한다.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;withastro&#x2F;snowpack&#x2F;tree&#x2F;main&#x2F;create-snowpack-app&#x2F;cli&quot;&gt;snowpack&#x2F;create-snowpack-app&#x2F;cli at main · withastro&#x2F;snowpack (github.com)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>20211128</title>
		<published>2021-11-28T00:00:00+00:00</published>
		<updated>2021-11-28T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/20211128/" type="text/html"/>
		<id>https://jeonconnect.github.io/20211128/</id>
		<content type="html">&lt;p&gt;새로운 프로젝트를 구성했다.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;npx create-react-app 3dc --template typescript
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Another post</title>
		<published>2020-06-06T00:00:00+00:00</published>
		<updated>2020-06-06T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/another-post/" type="text/html"/>
		<id>https://jeonconnect.github.io/another-post/</id>
		<content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eu feugiat sapien. Aenean ligula nunc, laoreet id sem in, interdum bibendum felis. Donec vel dui neque. Praesent ac sem ut justo volutpat rutrum a imperdiet tellus. Nam lobortis massa non hendrerit hendrerit. Vivamus porttitor dignissim turpis, eget aliquam urna tincidunt non. Aliquam et fringilla turpis. Nullam eros est, eleifend in ornare sed, hendrerit eget est. Aliquam tellus felis, suscipit vitae ex vel, fringilla tempus massa. Nulla facilisi. Pellentesque lobortis consequat lectus. Maecenas ac libero elit.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;heading-5&quot;&gt;Heading 5&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;heading-6&quot;&gt;Heading 6&lt;&#x2F;h6&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blockquote&quot;&gt;Blockquote&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote
with several lines&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;&#x2F;h2&gt;
&lt;p&gt;Tables aren&#x27;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Age&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Bob&lt;&#x2F;td&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Alice&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;inline-markdown-within-tables&quot;&gt;Inline Markdown within tables&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Inline   &lt;&#x2F;th&gt;&lt;th&gt;Markdown   &lt;&#x2F;th&gt;&lt;th&gt;In   &lt;&#x2F;th&gt;&lt;th&gt;Table&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;italics&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;bold&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;del&gt;strikethrough&lt;&#x2F;del&gt;   &lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;code&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;code-blocks&quot;&gt;Code Blocks&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;code-block-with-backticks&quot;&gt;Code block with backticks&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;&amp;#x2F;title&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;body&amp;gt;
&amp;lt;&amp;#x2F;html&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;list-types&quot;&gt;List Types&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;ordered-list&quot;&gt;Ordered List&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;&#x2F;li&gt;
&lt;li&gt;Second item&lt;&#x2F;li&gt;
&lt;li&gt;Third item&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;unordered-list&quot;&gt;Unordered List&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;&#x2F;li&gt;
&lt;li&gt;Another item&lt;&#x2F;li&gt;
&lt;li&gt;And another item&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nested-list&quot;&gt;Nested list&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Item
&lt;ol&gt;
&lt;li&gt;First Sub-item&lt;&#x2F;li&gt;
&lt;li&gt;Second Sub-item&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-elements-abbr-sub-sup-kbd-mark&quot;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;abbr title=&quot;Graphics Interchange Format&quot;&gt;GIF&lt;&#x2F;abbr&gt; is a bitmap image format.&lt;&#x2F;p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;&#x2F;sub&gt;O&lt;&#x2F;p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;&#x2F;sup&gt; + Y&lt;sup&gt;n&lt;&#x2F;sup&gt; = Z&lt;sup&gt;n&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;&#x2F;kbd&gt;+&lt;kbd&gt;ALT&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Delete&lt;&#x2F;kbd&gt;&lt;&#x2F;kbd&gt; to end the session.&lt;&#x2F;p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;&#x2F;mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What is Zola</title>
		<published>2020-06-06T00:00:00+00:00</published>
		<updated>2020-06-06T00:00:00+00:00</updated>
		<link href="https://jeonconnect.github.io/what-is-zola/" type="text/html"/>
		<id>https://jeonconnect.github.io/what-is-zola/</id>
		<content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eu feugiat sapien. Aenean ligula nunc, laoreet id sem in, interdum bibendum felis. Donec vel dui neque. Praesent ac sem ut justo volutpat rutrum a imperdiet tellus. Nam lobortis massa non hendrerit hendrerit. Vivamus porttitor dignissim turpis, eget aliquam urna tincidunt non. Aliquam et fringilla turpis. Nullam eros est, eleifend in ornare sed, hendrerit eget est. Aliquam tellus felis, suscipit vitae ex vel, fringilla tempus massa. Nulla facilisi. Pellentesque lobortis consequat lectus. Maecenas ac libero elit.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;heading-1&quot;&gt;Heading 1&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;heading-2&quot;&gt;Heading 2&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;heading-3&quot;&gt;Heading 3&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;heading-4&quot;&gt;Heading 4&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;heading-5&quot;&gt;Heading 5&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;heading-6&quot;&gt;Heading 6&lt;&#x2F;h6&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blockquote&quot;&gt;Blockquote&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote
with several lines&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;&#x2F;h2&gt;
&lt;p&gt;Tables aren&#x27;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Age&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Bob&lt;&#x2F;td&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Alice&lt;&#x2F;td&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;inline-markdown-within-tables&quot;&gt;Inline Markdown within tables&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Inline   &lt;&#x2F;th&gt;&lt;th&gt;Markdown   &lt;&#x2F;th&gt;&lt;th&gt;In   &lt;&#x2F;th&gt;&lt;th&gt;Table&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;em&gt;italics&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;bold&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;del&gt;strikethrough&lt;&#x2F;del&gt;   &lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;code&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;code-blocks&quot;&gt;Code Blocks&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;code-block-with-backticks&quot;&gt;Code block with backticks&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;&amp;#x2F;title&amp;gt;
&amp;lt;&amp;#x2F;head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;&amp;#x2F;p&amp;gt;
&amp;lt;&amp;#x2F;body&amp;gt;
&amp;lt;&amp;#x2F;html&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;list-types&quot;&gt;List Types&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;ordered-list&quot;&gt;Ordered List&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;&#x2F;li&gt;
&lt;li&gt;Second item&lt;&#x2F;li&gt;
&lt;li&gt;Third item&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;unordered-list&quot;&gt;Unordered List&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;&#x2F;li&gt;
&lt;li&gt;Another item&lt;&#x2F;li&gt;
&lt;li&gt;And another item&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;nested-list&quot;&gt;Nested list&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Item
&lt;ol&gt;
&lt;li&gt;First Sub-item&lt;&#x2F;li&gt;
&lt;li&gt;Second Sub-item&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-elements-abbr-sub-sup-kbd-mark&quot;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;abbr title=&quot;Graphics Interchange Format&quot;&gt;GIF&lt;&#x2F;abbr&gt; is a bitmap image format.&lt;&#x2F;p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;&#x2F;sub&gt;O&lt;&#x2F;p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;&#x2F;sup&gt; + Y&lt;sup&gt;n&lt;&#x2F;sup&gt; = Z&lt;sup&gt;n&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;&#x2F;kbd&gt;+&lt;kbd&gt;ALT&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Delete&lt;&#x2F;kbd&gt;&lt;&#x2F;kbd&gt; to end the session.&lt;&#x2F;p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;&#x2F;mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
