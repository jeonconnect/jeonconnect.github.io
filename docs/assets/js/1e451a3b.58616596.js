"use strict";(self.webpackChunkjeonconnect_github_io_docusaurus=self.webpackChunkjeonconnect_github_io_docusaurus||[]).push([[4720],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),y=a,g=d["".concat(p,".").concat(y)]||d[y]||u[y]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={},i="netty",l={unversionedId:"notes/netty",id:"notes/netty",title:"netty",description:"\uba3c\uc800, \uba54\uc2dc\uc9c0 \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub294 \uc694\uccad\uacfc \uc751\ub2f5\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158 ID\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.",source:"@site/docs/notes/netty.md",sourceDirName:"notes",slug:"/notes/netty",permalink:"/docs/notes/netty",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"mariadb",permalink:"/docs/notes/mariadb"},next:{title:"node.js",permalink:"/docs/notes/nodejs"}},p={},s=[],c={toc:s};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"netty"},"netty"),(0,a.kt)("h1",{id:"rpc-\ucc98\ub7fc-\ub3d9\uae30\ubc29\uc2dd\uc73c\ub85c-\uc694\uccad\ud6c4-\uc751\ub2f5\ubc1b\uae30"},"RPC \ucc98\ub7fc \ub3d9\uae30\ubc29\uc2dd\uc73c\ub85c \uc694\uccad\ud6c4 \uc751\ub2f5\ubc1b\uae30"),(0,a.kt)("p",null,"\uba3c\uc800, \uba54\uc2dc\uc9c0 \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub294 \uc694\uccad\uacfc \uc751\ub2f5\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158 ID\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"public class Message {\n    private final long transactionId;\n    private final String payload;\n\n    public Message(long transactionId, String payload) {\n        this.transactionId = transactionId;\n        this.payload = payload;\n    }\n\n    public long getTransactionId() {\n        return transactionId;\n    }\n\n    public String getPayload() {\n        return payload;\n    }\n}\n")),(0,a.kt)("p",null,"\uc774\uc81c ",(0,a.kt)("inlineCode",{parentName:"p"},"RpcClient")," \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \ud074\ub798\uc2a4\ub294 \ub124\ud2f0\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc6d0\uaca9 \uc11c\ubc84\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0b4\uace0 \uc751\ub2f5\uc744 \ubc1b\uc544\uc62c \uac83\uc785\ub2c8\ub2e4. \uc694\uccad\ub9c8\ub2e4 \uace0\uc720\ud55c \ud2b8\ub79c\uc7ad\uc158 ID\ub97c \uc0dd\uc131\ud558\uace0, \uc751\ub2f5\uc744 \ubc1b\uc744 \ub54c\uae4c\uc9c0 ",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub300\uae30\ud569\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.*;\n\npublic class RpcClient {\n    private final ConcurrentHashMap<Long, CompletableFuture<Message>> responseFutures = new ConcurrentHashMap<>();\n    private final AtomicLong transactionIdCounter = new AtomicLong(0);\n    private final EventLoopGroup group = new NioEventLoopGroup();\n    private final Channel channel;\n\n    public RpcClient(String host, int port) throws InterruptedException {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<>() {\n                    @Override\n                    protected void initChannel(Channel ch) {\n                        ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(65535, 0, 4, 0, 4));\n                        ch.pipeline().addLast(new LengthFieldPrepender(4));\n                        ch.pipeline().addLast(new RpcClientHandler());\n                    }\n                });\n\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public CompletableFuture<Message> sendRequest(Message request) {\n        CompletableFuture<Message> future = new CompletableFuture<>();\n        responseFutures.put(request.getTransactionId(), future);\n        ByteBuf buf = Unpooled.wrappedBuffer(request.getPayload().getBytes(StandardCharsets.UTF_8));\n        channel.writeAndFlush(buf);\n        return future;\n    }\n\n    public Message call(String payload) throws ExecutionException, InterruptedException {\n        long transactionId = transactionIdCounter.incrementAndGet();\n        Message request = new Message(transactionId, payload);\n        return sendRequest(request).get();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    private class RpcClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) {\n            long transactionId = msg.readLong();\n            int length = msg.readInt();\n            byte[] payloadBytes = new byte[length];\n            msg.readBytes(payloadBytes);\n            String payload = new String(payloadBytes, StandardCharsets.UTF_8);\n\n            Message response = new Message(transactionId, payload);\n            CompletableFuture<Message> future = responseFutures.remove(transactionId);\n            if (future != null) {\n                future.complete(response);\n            }\n        }\n    }\n}\n")),(0,a.kt)("p",null,"\uc774\uc81c \uba54\uc778 \uba54\uc11c\ub4dc\uc5d0\uc11c ",(0,a.kt)("inlineCode",{parentName:"p"},"RpcClient"),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc6d0\uaca9 \uc11c\ubc84\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0b4\uace0 \uc751\ub2f5\uc744 \ubc1b\uc544\uc624\ub294 \uacfc\uc815\uc744 \ud655\uc778\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'public static void main(String[] args) {\n    try {\n        RpcClient client = new RpcClient("localhost", 8080);\n        String requestPayload = "Hello, server!";\n        System.out.println("Sending request: " + requestPayload);\n        Message response = client.call(requestPayload);\n        System.out.println("Received response: " + response.getPayload());\n        client.shutdown();\n    } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n    }\n}\n')),(0,a.kt)("p",null,"\uc774 \uc608\uc81c\uc5d0\uc11c\ub294 ",(0,a.kt)("inlineCode",{parentName:"p"},"RpcClient")," \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc6d0\uaca9 \uc11c\ubc84\uc5d0 \uc694\uccad\uc744 \ubcf4\ub0b4\uace0 \uc751\ub2f5\uc744 \ubc1b\uc544\uc624\ub294 \uacfc\uc815\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \uac01 \uc694\uccad\uc5d0 \uace0\uc720\ud55c \ud2b8\ub79c\uc7ad\uc158 ID\ub97c \uc0dd\uc131\ud558\uace0 ",(0,a.kt)("inlineCode",{parentName:"p"},"ConcurrentHashMap"),"\uc744 \uc0ac\uc6a9\ud558\uc5ec \uad00\ub9ac\ud569\ub2c8\ub2e4. ",(0,a.kt)("inlineCode",{parentName:"p"},"call()")," \uba54\uc11c\ub4dc\ub294 \ub3d9\uae30\uc801\uc73c\ub85c \ub3d9\uc791\ud558\uc5ec \uc751\ub2f5\uc744 \uae30\ub2e4\ub9b0 \ud6c4\uc5d0 \ubc18\ud658\ud569\ub2c8\ub2e4."))}u.isMDXComponent=!0}}]);